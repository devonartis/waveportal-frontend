{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","contractABI","abi","useEffect","a","async","window","ethereum","console","log","request","method","accounts","length","account","checkIfWalletIsConnected","className","onClick","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","wave","waveTxn","hash","wait","alert","ReactDOM","render","document","getElementById"],"mappings":"+sOA6HeA,EAvHH,WAAO,IAAD,EAC4BC,mBAAS,IADrC,mBACTC,EADS,KACOC,EADP,KAIVC,EAAcC,EAAIA,IAuFxB,OAJAC,qBAAU,YAjFuB,yBAAAC,EAAAC,OAAA,8DAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,0BAAAH,EAAA,MAWNG,EAASG,QAAQ,CAAEC,OAAQ,kBAXrB,QAaL,KAFlBC,EAXuB,QAahBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cd,EAAkBc,IAElBN,QAAQC,IAAI,+BAlBe,kDAqB7BD,QAAQC,IAAR,MArB6B,yDAkF/BM,KACC,IAGD,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAIA,yBAAKA,UAAU,OAAf,0HAIA,4BAAQA,UAAU,aAAaC,QA/CvB,sCAAAb,EAAAC,OAAA,8DAEWC,SAAbC,EAFE,EAEFA,UAFE,wBAKFW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA3DpB,6CA2D8CxB,EAAaqB,GAPrE,WAAAlB,EAAA,MAUUoB,EAAmBE,iBAV7B,cAUJC,EAVI,OAWRnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAX3C,YAAAxB,EAAA,MAgBcoB,EAAmBK,QAhBjC,eAgBFC,EAhBE,OAiBRtB,QAAQC,IAAI,YAAaqB,EAAQC,MAjBzB,YAAA3B,EAAA,MAmBF0B,EAAQE,QAnBN,eAoBRxB,QAAQC,IAAI,YAAaqB,EAAQC,MApBzB,YAAA3B,EAAA,MAsBMoB,EAAmBE,iBAtBzB,QAsBRC,EAtBQ,OAuBRnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAvB3C,wBAyBRpB,QAAQC,IAAI,kCAzBJ,0DA4BVD,QAAQC,IAAR,MA5BU,2DA+CR,eAOEV,GACA,4BAAQiB,UAAU,aAAaC,QA5EjB,8BAAAb,EAAAC,OAAA,8DAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhB0B,MAAM,iBALU,4CAAA7B,EAAA,MASKG,EAASG,QAAQ,CAAEC,OAAQ,yBAThC,OASZC,EATY,OAWlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCZ,EAAkBY,EAAS,IAZT,kDAclBJ,QAAQC,IAAR,MAdkB,2DA4Ed,qBC/GVyB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1a72fe6d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const contractAddress = \"0x53455aAC1C735bd5858F1abe9a866171A3b6B596\";\n  const contractABI = abi.abi;\n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n  *  Function to get waves balance\n  */\n   const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        \n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n}\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        \n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}